/* automatically generated by rust-bindgen 0.72.0 */

pub const __MINGW64_VERSION_MAJOR: u32 = 13;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1536;
pub const _WIN32_WINNT: u32 = 1537;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const STREAM_CFG_LOCAL: u32 = 0;
pub const STREAM_CFG_REMOTE: u32 = 1;
pub const STREAM_CFG_AUTO: u32 = 2;
pub const COLORSPACE_REC_601: u32 = 0;
pub const COLORSPACE_REC_709: u32 = 1;
pub const COLORSPACE_REC_2020: u32 = 2;
pub const COLOR_RANGE_LIMITED: u32 = 0;
pub const COLOR_RANGE_FULL: u32 = 1;
pub const ENCFLG_NONE: u32 = 0;
pub const ENCFLG_AUDIO: u32 = 1;
pub const ENCFLG_VIDEO: u32 = 2;
pub const ENCFLG_ALL: u32 = 4294967295;
pub const BUFFER_TYPE_PICDATA: u32 = 0;
pub const BUFFER_TYPE_SPS: u32 = 1;
pub const BUFFER_TYPE_PPS: u32 = 2;
pub const BUFFER_TYPE_VPS: u32 = 3;
pub const FRAME_TYPE_PFRAME: u32 = 0;
pub const FRAME_TYPE_IDR: u32 = 1;
pub const AUDIO_CONFIGURATION_MAX_CHANNEL_COUNT: u32 = 8;
pub const VIDEO_FORMAT_H264: u32 = 1;
pub const VIDEO_FORMAT_H264_HIGH8_444: u32 = 4;
pub const VIDEO_FORMAT_H265: u32 = 256;
pub const VIDEO_FORMAT_H265_MAIN10: u32 = 512;
pub const VIDEO_FORMAT_H265_REXT8_444: u32 = 1024;
pub const VIDEO_FORMAT_H265_REXT10_444: u32 = 2048;
pub const VIDEO_FORMAT_AV1_MAIN8: u32 = 4096;
pub const VIDEO_FORMAT_AV1_MAIN10: u32 = 8192;
pub const VIDEO_FORMAT_AV1_HIGH8_444: u32 = 16384;
pub const VIDEO_FORMAT_AV1_HIGH10_444: u32 = 32768;
pub const VIDEO_FORMAT_MASK_H264: u32 = 15;
pub const VIDEO_FORMAT_MASK_H265: u32 = 3840;
pub const VIDEO_FORMAT_MASK_AV1: u32 = 61440;
pub const VIDEO_FORMAT_MASK_10BIT: u32 = 43520;
pub const VIDEO_FORMAT_MASK_YUV444: u32 = 52228;
pub const CAPABILITY_DIRECT_SUBMIT: u32 = 1;
pub const CAPABILITY_REFERENCE_FRAME_INVALIDATION_AVC: u32 = 2;
pub const CAPABILITY_REFERENCE_FRAME_INVALIDATION_HEVC: u32 = 4;
pub const CAPABILITY_SLOW_OPUS_DECODER: u32 = 8;
pub const CAPABILITY_SUPPORTS_ARBITRARY_AUDIO_DURATION: u32 = 16;
pub const CAPABILITY_PULL_RENDERER: u32 = 32;
pub const CAPABILITY_REFERENCE_FRAME_INVALIDATION_AV1: u32 = 64;
pub const DR_OK: u32 = 0;
pub const DR_NEED_IDR: i32 = -1;
pub const STAGE_NONE: u32 = 0;
pub const STAGE_PLATFORM_INIT: u32 = 1;
pub const STAGE_NAME_RESOLUTION: u32 = 2;
pub const STAGE_AUDIO_STREAM_INIT: u32 = 3;
pub const STAGE_RTSP_HANDSHAKE: u32 = 4;
pub const STAGE_CONTROL_STREAM_INIT: u32 = 5;
pub const STAGE_VIDEO_STREAM_INIT: u32 = 6;
pub const STAGE_INPUT_STREAM_INIT: u32 = 7;
pub const STAGE_CONTROL_STREAM_START: u32 = 8;
pub const STAGE_VIDEO_STREAM_START: u32 = 9;
pub const STAGE_AUDIO_STREAM_START: u32 = 10;
pub const STAGE_INPUT_STREAM_START: u32 = 11;
pub const STAGE_MAX: u32 = 12;
pub const ML_ERROR_GRACEFUL_TERMINATION: u32 = 0;
pub const ML_ERROR_NO_VIDEO_TRAFFIC: i32 = -100;
pub const ML_ERROR_NO_VIDEO_FRAME: i32 = -101;
pub const ML_ERROR_UNEXPECTED_EARLY_TERMINATION: i32 = -102;
pub const ML_ERROR_PROTECTED_CONTENT: i32 = -103;
pub const ML_ERROR_FRAME_CONVERSION: i32 = -104;
pub const CONN_STATUS_OKAY: u32 = 0;
pub const CONN_STATUS_POOR: u32 = 1;
pub const DS_EFFECT_PAYLOAD_SIZE: u32 = 10;
pub const DS_EFFECT_RIGHT_TRIGGER: u32 = 4;
pub const DS_EFFECT_LEFT_TRIGGER: u32 = 8;
pub const SCM_H264: u32 = 1;
pub const SCM_HEVC: u32 = 256;
pub const SCM_HEVC_MAIN10: u32 = 512;
pub const SCM_AV1_MAIN8: u32 = 65536;
pub const SCM_AV1_MAIN10: u32 = 131072;
pub const SCM_H264_HIGH8_444: u32 = 262144;
pub const SCM_HEVC_REXT8_444: u32 = 524288;
pub const SCM_HEVC_REXT10_444: u32 = 1048576;
pub const SCM_AV1_HIGH8_444: u32 = 2097152;
pub const SCM_AV1_HIGH10_444: u32 = 4194304;
pub const SCM_MASK_H264: u32 = 262145;
pub const SCM_MASK_HEVC: u32 = 1573632;
pub const SCM_MASK_AV1: u32 = 6488064;
pub const SCM_MASK_10BIT: u32 = 5374464;
pub const SCM_MASK_YUV444: u32 = 8126464;
pub const LI_ERR_UNSUPPORTED: i32 = -5501;
pub const LI_TOUCH_EVENT_HOVER: u32 = 0;
pub const LI_TOUCH_EVENT_DOWN: u32 = 1;
pub const LI_TOUCH_EVENT_UP: u32 = 2;
pub const LI_TOUCH_EVENT_MOVE: u32 = 3;
pub const LI_TOUCH_EVENT_CANCEL: u32 = 4;
pub const LI_TOUCH_EVENT_BUTTON_ONLY: u32 = 5;
pub const LI_TOUCH_EVENT_HOVER_LEAVE: u32 = 6;
pub const LI_TOUCH_EVENT_CANCEL_ALL: u32 = 7;
pub const LI_ROT_UNKNOWN: u32 = 65535;
pub const LI_TOOL_TYPE_UNKNOWN: u32 = 0;
pub const LI_TOOL_TYPE_PEN: u32 = 1;
pub const LI_TOOL_TYPE_ERASER: u32 = 2;
pub const LI_PEN_BUTTON_PRIMARY: u32 = 1;
pub const LI_PEN_BUTTON_SECONDARY: u32 = 2;
pub const LI_PEN_BUTTON_TERTIARY: u32 = 4;
pub const LI_TILT_UNKNOWN: u32 = 255;
pub const BUTTON_ACTION_PRESS: u32 = 7;
pub const BUTTON_ACTION_RELEASE: u32 = 8;
pub const BUTTON_LEFT: u32 = 1;
pub const BUTTON_MIDDLE: u32 = 2;
pub const BUTTON_RIGHT: u32 = 3;
pub const BUTTON_X1: u32 = 4;
pub const BUTTON_X2: u32 = 5;
pub const KEY_ACTION_DOWN: u32 = 3;
pub const KEY_ACTION_UP: u32 = 4;
pub const MODIFIER_SHIFT: u32 = 1;
pub const MODIFIER_CTRL: u32 = 2;
pub const MODIFIER_ALT: u32 = 4;
pub const MODIFIER_META: u32 = 8;
pub const SS_KBE_FLAG_NON_NORMALIZED: u32 = 1;
pub const A_FLAG: u32 = 4096;
pub const B_FLAG: u32 = 8192;
pub const X_FLAG: u32 = 16384;
pub const Y_FLAG: u32 = 32768;
pub const UP_FLAG: u32 = 1;
pub const DOWN_FLAG: u32 = 2;
pub const LEFT_FLAG: u32 = 4;
pub const RIGHT_FLAG: u32 = 8;
pub const LB_FLAG: u32 = 256;
pub const RB_FLAG: u32 = 512;
pub const PLAY_FLAG: u32 = 16;
pub const BACK_FLAG: u32 = 32;
pub const LS_CLK_FLAG: u32 = 64;
pub const RS_CLK_FLAG: u32 = 128;
pub const SPECIAL_FLAG: u32 = 1024;
pub const PADDLE1_FLAG: u32 = 65536;
pub const PADDLE2_FLAG: u32 = 131072;
pub const PADDLE3_FLAG: u32 = 262144;
pub const PADDLE4_FLAG: u32 = 524288;
pub const TOUCHPAD_FLAG: u32 = 1048576;
pub const MISC_FLAG: u32 = 2097152;
pub const LI_CTYPE_UNKNOWN: u32 = 0;
pub const LI_CTYPE_XBOX: u32 = 1;
pub const LI_CTYPE_PS: u32 = 2;
pub const LI_CTYPE_NINTENDO: u32 = 3;
pub const LI_CCAP_ANALOG_TRIGGERS: u32 = 1;
pub const LI_CCAP_RUMBLE: u32 = 2;
pub const LI_CCAP_TRIGGER_RUMBLE: u32 = 4;
pub const LI_CCAP_TOUCHPAD: u32 = 8;
pub const LI_CCAP_ACCEL: u32 = 16;
pub const LI_CCAP_GYRO: u32 = 32;
pub const LI_CCAP_BATTERY_STATE: u32 = 64;
pub const LI_CCAP_RGB_LED: u32 = 128;
pub const LI_MOTION_TYPE_ACCEL: u32 = 1;
pub const LI_MOTION_TYPE_GYRO: u32 = 2;
pub const LI_BATTERY_STATE_UNKNOWN: u32 = 0;
pub const LI_BATTERY_STATE_NOT_PRESENT: u32 = 1;
pub const LI_BATTERY_STATE_DISCHARGING: u32 = 2;
pub const LI_BATTERY_STATE_CHARGING: u32 = 3;
pub const LI_BATTERY_STATE_NOT_CHARGING: u32 = 4;
pub const LI_BATTERY_STATE_FULL: u32 = 5;
pub const LI_BATTERY_PERCENTAGE_UNKNOWN: u32 = 255;
pub const ML_PORT_INDEX_TCP_47984: u32 = 0;
pub const ML_PORT_INDEX_TCP_47989: u32 = 1;
pub const ML_PORT_INDEX_TCP_48010: u32 = 2;
pub const ML_PORT_INDEX_UDP_47998: u32 = 8;
pub const ML_PORT_INDEX_UDP_47999: u32 = 9;
pub const ML_PORT_INDEX_UDP_48000: u32 = 10;
pub const ML_PORT_INDEX_UDP_48010: u32 = 11;
pub const ML_PORT_FLAG_ALL: u32 = 4294967295;
pub const ML_PORT_FLAG_TCP_47984: u32 = 1;
pub const ML_PORT_FLAG_TCP_47989: u32 = 2;
pub const ML_PORT_FLAG_TCP_48010: u32 = 4;
pub const ML_PORT_FLAG_UDP_47998: u32 = 256;
pub const ML_PORT_FLAG_UDP_47999: u32 = 512;
pub const ML_PORT_FLAG_UDP_48000: u32 = 1024;
pub const ML_PORT_FLAG_UDP_48010: u32 = 2048;
pub const ML_TEST_RESULT_INCONCLUSIVE: u32 = 4294967295;
pub const LI_FF_PEN_TOUCH_EVENTS: u32 = 1;
pub const LI_FF_CONTROLLER_TOUCH_EVENTS: u32 = 2;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
unsafe extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of localeinfo_struct"][::std::mem::size_of::<localeinfo_struct>() - 16usize];
    ["Alignment of localeinfo_struct"][::std::mem::align_of::<localeinfo_struct>() - 8usize];
    ["Offset of field: localeinfo_struct::locinfo"]
        [::std::mem::offset_of!(localeinfo_struct, locinfo) - 0usize];
    ["Offset of field: localeinfo_struct::mbcinfo"]
        [::std::mem::offset_of!(localeinfo_struct, mbcinfo) - 8usize];
};
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLC_ID"][::std::mem::size_of::<tagLC_ID>() - 6usize];
    ["Alignment of tagLC_ID"][::std::mem::align_of::<tagLC_ID>() - 2usize];
    ["Offset of field: tagLC_ID::wLanguage"][::std::mem::offset_of!(tagLC_ID, wLanguage) - 0usize];
    ["Offset of field: tagLC_ID::wCountry"][::std::mem::offset_of!(tagLC_ID, wCountry) - 2usize];
    ["Offset of field: tagLC_ID::wCodePage"][::std::mem::offset_of!(tagLC_ID, wCodePage) - 4usize];
};
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>() - 32usize];
    ["Alignment of threadlocaleinfostruct__bindgen_ty_1"]
        [::std::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::locale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, locale) - 0usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wlocale"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wlocale) - 8usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, refcount) - 16usize];
    ["Offset of field: threadlocaleinfostruct__bindgen_ty_1::wrefcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct__bindgen_ty_1, wrefcount) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of threadlocaleinfostruct"][::std::mem::size_of::<threadlocaleinfostruct>() - 352usize];
    ["Alignment of threadlocaleinfostruct"]
        [::std::mem::align_of::<threadlocaleinfostruct>() - 8usize];
    ["Offset of field: threadlocaleinfostruct::refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, refcount) - 0usize];
    ["Offset of field: threadlocaleinfostruct::lc_codepage"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_codepage) - 4usize];
    ["Offset of field: threadlocaleinfostruct::lc_collate_cp"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_collate_cp) - 8usize];
    ["Offset of field: threadlocaleinfostruct::lc_handle"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_handle) - 12usize];
    ["Offset of field: threadlocaleinfostruct::lc_id"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_id) - 36usize];
    ["Offset of field: threadlocaleinfostruct::lc_category"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_category) - 72usize];
    ["Offset of field: threadlocaleinfostruct::lc_clike"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_clike) - 264usize];
    ["Offset of field: threadlocaleinfostruct::mb_cur_max"]
        [::std::mem::offset_of!(threadlocaleinfostruct, mb_cur_max) - 268usize];
    ["Offset of field: threadlocaleinfostruct::lconv_intl_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_intl_refcount) - 272usize];
    ["Offset of field: threadlocaleinfostruct::lconv_num_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_num_refcount) - 280usize];
    ["Offset of field: threadlocaleinfostruct::lconv_mon_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv_mon_refcount) - 288usize];
    ["Offset of field: threadlocaleinfostruct::lconv"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lconv) - 296usize];
    ["Offset of field: threadlocaleinfostruct::ctype1_refcount"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1_refcount) - 304usize];
    ["Offset of field: threadlocaleinfostruct::ctype1"]
        [::std::mem::offset_of!(threadlocaleinfostruct, ctype1) - 312usize];
    ["Offset of field: threadlocaleinfostruct::pctype"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pctype) - 320usize];
    ["Offset of field: threadlocaleinfostruct::pclmap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pclmap) - 328usize];
    ["Offset of field: threadlocaleinfostruct::pcumap"]
        [::std::mem::offset_of!(threadlocaleinfostruct, pcumap) - 336usize];
    ["Offset of field: threadlocaleinfostruct::lc_time_curr"]
        [::std::mem::offset_of!(threadlocaleinfostruct, lc_time_curr) - 344usize];
};
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn LiGetLaunchUrlQueryParameters() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STREAM_CONFIGURATION {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub fps: ::std::os::raw::c_int,
    pub bitrate: ::std::os::raw::c_int,
    pub packetSize: ::std::os::raw::c_int,
    pub streamingRemotely: ::std::os::raw::c_int,
    pub audioConfiguration: ::std::os::raw::c_int,
    pub supportedVideoFormats: ::std::os::raw::c_int,
    pub clientRefreshRateX100: ::std::os::raw::c_int,
    pub colorSpace: ::std::os::raw::c_int,
    pub colorRange: ::std::os::raw::c_int,
    pub encryptionFlags: ::std::os::raw::c_int,
    pub remoteInputAesKey: [::std::os::raw::c_char; 16usize],
    pub remoteInputAesIv: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _STREAM_CONFIGURATION"][::std::mem::size_of::<_STREAM_CONFIGURATION>() - 80usize];
    ["Alignment of _STREAM_CONFIGURATION"]
        [::std::mem::align_of::<_STREAM_CONFIGURATION>() - 4usize];
    ["Offset of field: _STREAM_CONFIGURATION::width"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, width) - 0usize];
    ["Offset of field: _STREAM_CONFIGURATION::height"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, height) - 4usize];
    ["Offset of field: _STREAM_CONFIGURATION::fps"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, fps) - 8usize];
    ["Offset of field: _STREAM_CONFIGURATION::bitrate"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, bitrate) - 12usize];
    ["Offset of field: _STREAM_CONFIGURATION::packetSize"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, packetSize) - 16usize];
    ["Offset of field: _STREAM_CONFIGURATION::streamingRemotely"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, streamingRemotely) - 20usize];
    ["Offset of field: _STREAM_CONFIGURATION::audioConfiguration"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, audioConfiguration) - 24usize];
    ["Offset of field: _STREAM_CONFIGURATION::supportedVideoFormats"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, supportedVideoFormats) - 28usize];
    ["Offset of field: _STREAM_CONFIGURATION::clientRefreshRateX100"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, clientRefreshRateX100) - 32usize];
    ["Offset of field: _STREAM_CONFIGURATION::colorSpace"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, colorSpace) - 36usize];
    ["Offset of field: _STREAM_CONFIGURATION::colorRange"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, colorRange) - 40usize];
    ["Offset of field: _STREAM_CONFIGURATION::encryptionFlags"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, encryptionFlags) - 44usize];
    ["Offset of field: _STREAM_CONFIGURATION::remoteInputAesKey"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, remoteInputAesKey) - 48usize];
    ["Offset of field: _STREAM_CONFIGURATION::remoteInputAesIv"]
        [::std::mem::offset_of!(_STREAM_CONFIGURATION, remoteInputAesIv) - 64usize];
};
pub type STREAM_CONFIGURATION = _STREAM_CONFIGURATION;
pub type PSTREAM_CONFIGURATION = *mut _STREAM_CONFIGURATION;
unsafe extern "C" {
    pub fn LiInitializeStreamConfiguration(streamConfig: PSTREAM_CONFIGURATION);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LENTRY {
    pub next: *mut _LENTRY,
    pub data: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub bufferType: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LENTRY"][::std::mem::size_of::<_LENTRY>() - 24usize];
    ["Alignment of _LENTRY"][::std::mem::align_of::<_LENTRY>() - 8usize];
    ["Offset of field: _LENTRY::next"][::std::mem::offset_of!(_LENTRY, next) - 0usize];
    ["Offset of field: _LENTRY::data"][::std::mem::offset_of!(_LENTRY, data) - 8usize];
    ["Offset of field: _LENTRY::length"][::std::mem::offset_of!(_LENTRY, length) - 16usize];
    ["Offset of field: _LENTRY::bufferType"][::std::mem::offset_of!(_LENTRY, bufferType) - 20usize];
};
pub type LENTRY = _LENTRY;
pub type PLENTRY = *mut _LENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DECODE_UNIT {
    pub frameNumber: ::std::os::raw::c_int,
    pub frameType: ::std::os::raw::c_int,
    pub frameHostProcessingLatency: u16,
    pub receiveTimeMs: u64,
    pub enqueueTimeMs: u64,
    pub presentationTimeMs: ::std::os::raw::c_uint,
    pub fullLength: ::std::os::raw::c_int,
    pub bufferList: PLENTRY,
    pub hdrActive: bool,
    pub colorspace: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DECODE_UNIT"][::std::mem::size_of::<_DECODE_UNIT>() - 56usize];
    ["Alignment of _DECODE_UNIT"][::std::mem::align_of::<_DECODE_UNIT>() - 8usize];
    ["Offset of field: _DECODE_UNIT::frameNumber"]
        [::std::mem::offset_of!(_DECODE_UNIT, frameNumber) - 0usize];
    ["Offset of field: _DECODE_UNIT::frameType"]
        [::std::mem::offset_of!(_DECODE_UNIT, frameType) - 4usize];
    ["Offset of field: _DECODE_UNIT::frameHostProcessingLatency"]
        [::std::mem::offset_of!(_DECODE_UNIT, frameHostProcessingLatency) - 8usize];
    ["Offset of field: _DECODE_UNIT::receiveTimeMs"]
        [::std::mem::offset_of!(_DECODE_UNIT, receiveTimeMs) - 16usize];
    ["Offset of field: _DECODE_UNIT::enqueueTimeMs"]
        [::std::mem::offset_of!(_DECODE_UNIT, enqueueTimeMs) - 24usize];
    ["Offset of field: _DECODE_UNIT::presentationTimeMs"]
        [::std::mem::offset_of!(_DECODE_UNIT, presentationTimeMs) - 32usize];
    ["Offset of field: _DECODE_UNIT::fullLength"]
        [::std::mem::offset_of!(_DECODE_UNIT, fullLength) - 36usize];
    ["Offset of field: _DECODE_UNIT::bufferList"]
        [::std::mem::offset_of!(_DECODE_UNIT, bufferList) - 40usize];
    ["Offset of field: _DECODE_UNIT::hdrActive"]
        [::std::mem::offset_of!(_DECODE_UNIT, hdrActive) - 48usize];
    ["Offset of field: _DECODE_UNIT::colorspace"]
        [::std::mem::offset_of!(_DECODE_UNIT, colorspace) - 49usize];
};
pub type DECODE_UNIT = _DECODE_UNIT;
pub type PDECODE_UNIT = *mut _DECODE_UNIT;
pub type DecoderRendererSetup = ::std::option::Option<
    unsafe extern "C" fn(
        videoFormat: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        redrawRate: ::std::os::raw::c_int,
        context: *mut ::std::os::raw::c_void,
        drFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type DecoderRendererStart = ::std::option::Option<unsafe extern "C" fn()>;
pub type DecoderRendererStop = ::std::option::Option<unsafe extern "C" fn()>;
pub type DecoderRendererCleanup = ::std::option::Option<unsafe extern "C" fn()>;
pub type DecoderRendererSubmitDecodeUnit =
    ::std::option::Option<unsafe extern "C" fn(decodeUnit: PDECODE_UNIT) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DECODER_RENDERER_CALLBACKS {
    pub setup: DecoderRendererSetup,
    pub start: DecoderRendererStart,
    pub stop: DecoderRendererStop,
    pub cleanup: DecoderRendererCleanup,
    pub submitDecodeUnit: DecoderRendererSubmitDecodeUnit,
    pub capabilities: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DECODER_RENDERER_CALLBACKS"]
        [::std::mem::size_of::<_DECODER_RENDERER_CALLBACKS>() - 48usize];
    ["Alignment of _DECODER_RENDERER_CALLBACKS"]
        [::std::mem::align_of::<_DECODER_RENDERER_CALLBACKS>() - 8usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::setup"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, setup) - 0usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::start"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, start) - 8usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::stop"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, stop) - 16usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::cleanup"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, cleanup) - 24usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::submitDecodeUnit"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, submitDecodeUnit) - 32usize];
    ["Offset of field: _DECODER_RENDERER_CALLBACKS::capabilities"]
        [::std::mem::offset_of!(_DECODER_RENDERER_CALLBACKS, capabilities) - 40usize];
};
pub type DECODER_RENDERER_CALLBACKS = _DECODER_RENDERER_CALLBACKS;
pub type PDECODER_RENDERER_CALLBACKS = *mut _DECODER_RENDERER_CALLBACKS;
unsafe extern "C" {
    pub fn LiInitializeVideoCallbacks(drCallbacks: PDECODER_RENDERER_CALLBACKS);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPUS_MULTISTREAM_CONFIGURATION {
    pub sampleRate: ::std::os::raw::c_int,
    pub channelCount: ::std::os::raw::c_int,
    pub streams: ::std::os::raw::c_int,
    pub coupledStreams: ::std::os::raw::c_int,
    pub samplesPerFrame: ::std::os::raw::c_int,
    pub mapping: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OPUS_MULTISTREAM_CONFIGURATION"]
        [::std::mem::size_of::<_OPUS_MULTISTREAM_CONFIGURATION>() - 28usize];
    ["Alignment of _OPUS_MULTISTREAM_CONFIGURATION"]
        [::std::mem::align_of::<_OPUS_MULTISTREAM_CONFIGURATION>() - 4usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::sampleRate"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, sampleRate) - 0usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::channelCount"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, channelCount) - 4usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::streams"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, streams) - 8usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::coupledStreams"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, coupledStreams) - 12usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::samplesPerFrame"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, samplesPerFrame) - 16usize];
    ["Offset of field: _OPUS_MULTISTREAM_CONFIGURATION::mapping"]
        [::std::mem::offset_of!(_OPUS_MULTISTREAM_CONFIGURATION, mapping) - 20usize];
};
pub type OPUS_MULTISTREAM_CONFIGURATION = _OPUS_MULTISTREAM_CONFIGURATION;
pub type POPUS_MULTISTREAM_CONFIGURATION = *mut _OPUS_MULTISTREAM_CONFIGURATION;
pub type AudioRendererInit = ::std::option::Option<
    unsafe extern "C" fn(
        audioConfiguration: ::std::os::raw::c_int,
        opusConfig: POPUS_MULTISTREAM_CONFIGURATION,
        context: *mut ::std::os::raw::c_void,
        arFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type AudioRendererStart = ::std::option::Option<unsafe extern "C" fn()>;
pub type AudioRendererStop = ::std::option::Option<unsafe extern "C" fn()>;
pub type AudioRendererCleanup = ::std::option::Option<unsafe extern "C" fn()>;
pub type AudioRendererDecodeAndPlaySample = ::std::option::Option<
    unsafe extern "C" fn(
        sampleData: *mut ::std::os::raw::c_char,
        sampleLength: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AUDIO_RENDERER_CALLBACKS {
    pub init: AudioRendererInit,
    pub start: AudioRendererStart,
    pub stop: AudioRendererStop,
    pub cleanup: AudioRendererCleanup,
    pub decodeAndPlaySample: AudioRendererDecodeAndPlaySample,
    pub capabilities: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AUDIO_RENDERER_CALLBACKS"]
        [::std::mem::size_of::<_AUDIO_RENDERER_CALLBACKS>() - 48usize];
    ["Alignment of _AUDIO_RENDERER_CALLBACKS"]
        [::std::mem::align_of::<_AUDIO_RENDERER_CALLBACKS>() - 8usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::init"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, init) - 0usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::start"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, start) - 8usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::stop"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, stop) - 16usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::cleanup"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, cleanup) - 24usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::decodeAndPlaySample"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, decodeAndPlaySample) - 32usize];
    ["Offset of field: _AUDIO_RENDERER_CALLBACKS::capabilities"]
        [::std::mem::offset_of!(_AUDIO_RENDERER_CALLBACKS, capabilities) - 40usize];
};
pub type AUDIO_RENDERER_CALLBACKS = _AUDIO_RENDERER_CALLBACKS;
pub type PAUDIO_RENDERER_CALLBACKS = *mut _AUDIO_RENDERER_CALLBACKS;
unsafe extern "C" {
    pub fn LiInitializeAudioCallbacks(arCallbacks: PAUDIO_RENDERER_CALLBACKS);
}
pub type ConnListenerStageStarting =
    ::std::option::Option<unsafe extern "C" fn(stage: ::std::os::raw::c_int)>;
pub type ConnListenerStageComplete =
    ::std::option::Option<unsafe extern "C" fn(stage: ::std::os::raw::c_int)>;
pub type ConnListenerStageFailed = ::std::option::Option<
    unsafe extern "C" fn(stage: ::std::os::raw::c_int, errorCode: ::std::os::raw::c_int),
>;
pub type ConnListenerConnectionStarted = ::std::option::Option<unsafe extern "C" fn()>;
pub type ConnListenerConnectionTerminated =
    ::std::option::Option<unsafe extern "C" fn(errorCode: ::std::os::raw::c_int)>;
pub type ConnListenerLogMessage =
    ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>;
pub type ConnListenerRumble = ::std::option::Option<
    unsafe extern "C" fn(
        controllerNumber: ::std::os::raw::c_ushort,
        lowFreqMotor: ::std::os::raw::c_ushort,
        highFreqMotor: ::std::os::raw::c_ushort,
    ),
>;
pub type ConnListenerConnectionStatusUpdate =
    ::std::option::Option<unsafe extern "C" fn(connectionStatus: ::std::os::raw::c_int)>;
pub type ConnListenerSetHdrMode = ::std::option::Option<unsafe extern "C" fn(hdrEnabled: bool)>;
pub type ConnListenerRumbleTriggers = ::std::option::Option<
    unsafe extern "C" fn(controllerNumber: u16, leftTriggerMotor: u16, rightTriggerMotor: u16),
>;
pub type ConnListenerSetMotionEventState = ::std::option::Option<
    unsafe extern "C" fn(controllerNumber: u16, motionType: u8, reportRateHz: u16),
>;
pub type ConnListenerSetAdaptiveTriggers = ::std::option::Option<
    unsafe extern "C" fn(
        controllerNumber: u16,
        eventFlags: u8,
        typeLeft: u8,
        typeRight: u8,
        left: *mut u8,
        right: *mut u8,
    ),
>;
pub type ConnListenerSetControllerLED =
    ::std::option::Option<unsafe extern "C" fn(controllerNumber: u16, r: u8, g: u8, b: u8)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONNECTION_LISTENER_CALLBACKS {
    pub stageStarting: ConnListenerStageStarting,
    pub stageComplete: ConnListenerStageComplete,
    pub stageFailed: ConnListenerStageFailed,
    pub connectionStarted: ConnListenerConnectionStarted,
    pub connectionTerminated: ConnListenerConnectionTerminated,
    pub logMessage: ConnListenerLogMessage,
    pub rumble: ConnListenerRumble,
    pub connectionStatusUpdate: ConnListenerConnectionStatusUpdate,
    pub setHdrMode: ConnListenerSetHdrMode,
    pub rumbleTriggers: ConnListenerRumbleTriggers,
    pub setMotionEventState: ConnListenerSetMotionEventState,
    pub setControllerLED: ConnListenerSetControllerLED,
    pub setAdaptiveTriggers: ConnListenerSetAdaptiveTriggers,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONNECTION_LISTENER_CALLBACKS"]
        [::std::mem::size_of::<_CONNECTION_LISTENER_CALLBACKS>() - 104usize];
    ["Alignment of _CONNECTION_LISTENER_CALLBACKS"]
        [::std::mem::align_of::<_CONNECTION_LISTENER_CALLBACKS>() - 8usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::stageStarting"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, stageStarting) - 0usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::stageComplete"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, stageComplete) - 8usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::stageFailed"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, stageFailed) - 16usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::connectionStarted"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, connectionStarted) - 24usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::connectionTerminated"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, connectionTerminated) - 32usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::logMessage"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, logMessage) - 40usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::rumble"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, rumble) - 48usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::connectionStatusUpdate"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, connectionStatusUpdate) - 56usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::setHdrMode"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, setHdrMode) - 64usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::rumbleTriggers"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, rumbleTriggers) - 72usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::setMotionEventState"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, setMotionEventState) - 80usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::setControllerLED"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, setControllerLED) - 88usize];
    ["Offset of field: _CONNECTION_LISTENER_CALLBACKS::setAdaptiveTriggers"]
        [::std::mem::offset_of!(_CONNECTION_LISTENER_CALLBACKS, setAdaptiveTriggers) - 96usize];
};
pub type CONNECTION_LISTENER_CALLBACKS = _CONNECTION_LISTENER_CALLBACKS;
pub type PCONNECTION_LISTENER_CALLBACKS = *mut _CONNECTION_LISTENER_CALLBACKS;
unsafe extern "C" {
    pub fn LiInitializeConnectionCallbacks(clCallbacks: PCONNECTION_LISTENER_CALLBACKS);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVER_INFORMATION {
    pub address: *const ::std::os::raw::c_char,
    pub serverInfoAppVersion: *const ::std::os::raw::c_char,
    pub serverInfoGfeVersion: *const ::std::os::raw::c_char,
    pub rtspSessionUrl: *const ::std::os::raw::c_char,
    pub serverCodecModeSupport: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVER_INFORMATION"][::std::mem::size_of::<_SERVER_INFORMATION>() - 40usize];
    ["Alignment of _SERVER_INFORMATION"][::std::mem::align_of::<_SERVER_INFORMATION>() - 8usize];
    ["Offset of field: _SERVER_INFORMATION::address"]
        [::std::mem::offset_of!(_SERVER_INFORMATION, address) - 0usize];
    ["Offset of field: _SERVER_INFORMATION::serverInfoAppVersion"]
        [::std::mem::offset_of!(_SERVER_INFORMATION, serverInfoAppVersion) - 8usize];
    ["Offset of field: _SERVER_INFORMATION::serverInfoGfeVersion"]
        [::std::mem::offset_of!(_SERVER_INFORMATION, serverInfoGfeVersion) - 16usize];
    ["Offset of field: _SERVER_INFORMATION::rtspSessionUrl"]
        [::std::mem::offset_of!(_SERVER_INFORMATION, rtspSessionUrl) - 24usize];
    ["Offset of field: _SERVER_INFORMATION::serverCodecModeSupport"]
        [::std::mem::offset_of!(_SERVER_INFORMATION, serverCodecModeSupport) - 32usize];
};
pub type SERVER_INFORMATION = _SERVER_INFORMATION;
pub type PSERVER_INFORMATION = *mut _SERVER_INFORMATION;
unsafe extern "C" {
    pub fn LiInitializeServerInformation(serverInfo: PSERVER_INFORMATION);
}
unsafe extern "C" {
    pub fn LiStartConnection(
        serverInfo: PSERVER_INFORMATION,
        streamConfig: PSTREAM_CONFIGURATION,
        clCallbacks: PCONNECTION_LISTENER_CALLBACKS,
        drCallbacks: PDECODER_RENDERER_CALLBACKS,
        arCallbacks: PAUDIO_RENDERER_CALLBACKS,
        renderContext: *mut ::std::os::raw::c_void,
        drFlags: ::std::os::raw::c_int,
        audioContext: *mut ::std::os::raw::c_void,
        arFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiStopConnection();
}
unsafe extern "C" {
    pub fn LiInterruptConnection();
}
unsafe extern "C" {
    pub fn LiGetStageName(stage: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn LiGetEstimatedRttInfo(estimatedRtt: *mut u32, estimatedRttVariance: *mut u32) -> bool;
}
unsafe extern "C" {
    pub fn LiSendMouseMoveEvent(
        deltaX: ::std::os::raw::c_short,
        deltaY: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendMousePositionEvent(
        x: ::std::os::raw::c_short,
        y: ::std::os::raw::c_short,
        referenceWidth: ::std::os::raw::c_short,
        referenceHeight: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendMouseMoveAsMousePositionEvent(
        deltaX: ::std::os::raw::c_short,
        deltaY: ::std::os::raw::c_short,
        referenceWidth: ::std::os::raw::c_short,
        referenceHeight: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendTouchEvent(
        eventType: u8,
        pointerId: u32,
        x: f32,
        y: f32,
        pressureOrDistance: f32,
        contactAreaMajor: f32,
        contactAreaMinor: f32,
        rotation: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendPenEvent(
        eventType: u8,
        toolType: u8,
        penButtons: u8,
        x: f32,
        y: f32,
        pressureOrDistance: f32,
        contactAreaMajor: f32,
        contactAreaMinor: f32,
        rotation: u16,
        tilt: u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendMouseButtonEvent(
        action: ::std::os::raw::c_char,
        button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendKeyboardEvent(
        keyCode: ::std::os::raw::c_short,
        keyAction: ::std::os::raw::c_char,
        modifiers: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendKeyboardEvent2(
        keyCode: ::std::os::raw::c_short,
        keyAction: ::std::os::raw::c_char,
        modifiers: ::std::os::raw::c_char,
        flags: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendUtf8TextEvent(
        text: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendControllerEvent(
        buttonFlags: ::std::os::raw::c_int,
        leftTrigger: ::std::os::raw::c_uchar,
        rightTrigger: ::std::os::raw::c_uchar,
        leftStickX: ::std::os::raw::c_short,
        leftStickY: ::std::os::raw::c_short,
        rightStickX: ::std::os::raw::c_short,
        rightStickY: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendMultiControllerEvent(
        controllerNumber: ::std::os::raw::c_short,
        activeGamepadMask: ::std::os::raw::c_short,
        buttonFlags: ::std::os::raw::c_int,
        leftTrigger: ::std::os::raw::c_uchar,
        rightTrigger: ::std::os::raw::c_uchar,
        leftStickX: ::std::os::raw::c_short,
        leftStickY: ::std::os::raw::c_short,
        rightStickX: ::std::os::raw::c_short,
        rightStickY: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendControllerArrivalEvent(
        controllerNumber: u8,
        activeGamepadMask: u16,
        type_: u8,
        supportedButtonFlags: u32,
        capabilities: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendControllerTouchEvent(
        controllerNumber: u8,
        eventType: u8,
        pointerId: u32,
        x: f32,
        y: f32,
        pressure: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendControllerMotionEvent(
        controllerNumber: u8,
        motionType: u8,
        x: f32,
        y: f32,
        z: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendControllerBatteryEvent(
        controllerNumber: u8,
        batteryState: u8,
        batteryPercentage: u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendScrollEvent(scrollClicks: ::std::os::raw::c_schar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendHighResScrollEvent(scrollAmount: ::std::os::raw::c_short)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendHScrollEvent(scrollClicks: ::std::os::raw::c_schar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiSendHighResHScrollEvent(
        scrollAmount: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetMillis() -> u64;
}
unsafe extern "C" {
    pub fn LiFindExternalAddressIP4(
        stunServer: *const ::std::os::raw::c_char,
        stunPort: ::std::os::raw::c_ushort,
        wanAddr: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetPendingVideoFrames() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetPendingAudioFrames() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetPendingAudioDuration() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetPortFlagsFromStage(stage: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn LiGetPortFlagsFromTerminationErrorCode(
        errorCode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn LiGetProtocolFromPortFlagIndex(
        portFlagIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LiGetPortFromPortFlagIndex(
        portFlagIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn LiStringifyPortFlags(
        portFlags: ::std::os::raw::c_uint,
        separator: *const ::std::os::raw::c_char,
        outputBuffer: *mut ::std::os::raw::c_char,
        outputBufferLength: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn LiTestClientConnectivity(
        testServer: *const ::std::os::raw::c_char,
        referencePort: ::std::os::raw::c_ushort,
        testPortFlags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type VIDEO_FRAME_HANDLE = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn LiWaitForNextVideoFrame(
        frameHandle: *mut VIDEO_FRAME_HANDLE,
        decodeUnit: *mut PDECODE_UNIT,
    ) -> bool;
}
unsafe extern "C" {
    pub fn LiPollNextVideoFrame(
        frameHandle: *mut VIDEO_FRAME_HANDLE,
        decodeUnit: *mut PDECODE_UNIT,
    ) -> bool;
}
unsafe extern "C" {
    pub fn LiPeekNextVideoFrame(decodeUnit: *mut PDECODE_UNIT) -> bool;
}
unsafe extern "C" {
    pub fn LiWakeWaitForVideoFrame();
}
unsafe extern "C" {
    pub fn LiCompleteVideoFrame(handle: VIDEO_FRAME_HANDLE, drStatus: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn LiGetCurrentHostDisplayHdrMode() -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SS_HDR_METADATA {
    pub displayPrimaries: [_SS_HDR_METADATA__bindgen_ty_1; 3usize],
    pub whitePoint: _SS_HDR_METADATA__bindgen_ty_2,
    pub maxDisplayLuminance: u16,
    pub minDisplayLuminance: u16,
    pub maxContentLightLevel: u16,
    pub maxFrameAverageLightLevel: u16,
    pub maxFullFrameLuminance: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SS_HDR_METADATA__bindgen_ty_1 {
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SS_HDR_METADATA__bindgen_ty_1"]
        [::std::mem::size_of::<_SS_HDR_METADATA__bindgen_ty_1>() - 4usize];
    ["Alignment of _SS_HDR_METADATA__bindgen_ty_1"]
        [::std::mem::align_of::<_SS_HDR_METADATA__bindgen_ty_1>() - 2usize];
    ["Offset of field: _SS_HDR_METADATA__bindgen_ty_1::x"]
        [::std::mem::offset_of!(_SS_HDR_METADATA__bindgen_ty_1, x) - 0usize];
    ["Offset of field: _SS_HDR_METADATA__bindgen_ty_1::y"]
        [::std::mem::offset_of!(_SS_HDR_METADATA__bindgen_ty_1, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SS_HDR_METADATA__bindgen_ty_2 {
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SS_HDR_METADATA__bindgen_ty_2"]
        [::std::mem::size_of::<_SS_HDR_METADATA__bindgen_ty_2>() - 4usize];
    ["Alignment of _SS_HDR_METADATA__bindgen_ty_2"]
        [::std::mem::align_of::<_SS_HDR_METADATA__bindgen_ty_2>() - 2usize];
    ["Offset of field: _SS_HDR_METADATA__bindgen_ty_2::x"]
        [::std::mem::offset_of!(_SS_HDR_METADATA__bindgen_ty_2, x) - 0usize];
    ["Offset of field: _SS_HDR_METADATA__bindgen_ty_2::y"]
        [::std::mem::offset_of!(_SS_HDR_METADATA__bindgen_ty_2, y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SS_HDR_METADATA"][::std::mem::size_of::<_SS_HDR_METADATA>() - 26usize];
    ["Alignment of _SS_HDR_METADATA"][::std::mem::align_of::<_SS_HDR_METADATA>() - 2usize];
    ["Offset of field: _SS_HDR_METADATA::displayPrimaries"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, displayPrimaries) - 0usize];
    ["Offset of field: _SS_HDR_METADATA::whitePoint"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, whitePoint) - 12usize];
    ["Offset of field: _SS_HDR_METADATA::maxDisplayLuminance"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, maxDisplayLuminance) - 16usize];
    ["Offset of field: _SS_HDR_METADATA::minDisplayLuminance"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, minDisplayLuminance) - 18usize];
    ["Offset of field: _SS_HDR_METADATA::maxContentLightLevel"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, maxContentLightLevel) - 20usize];
    ["Offset of field: _SS_HDR_METADATA::maxFrameAverageLightLevel"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, maxFrameAverageLightLevel) - 22usize];
    ["Offset of field: _SS_HDR_METADATA::maxFullFrameLuminance"]
        [::std::mem::offset_of!(_SS_HDR_METADATA, maxFullFrameLuminance) - 24usize];
};
pub type SS_HDR_METADATA = _SS_HDR_METADATA;
pub type PSS_HDR_METADATA = *mut _SS_HDR_METADATA;
unsafe extern "C" {
    pub fn LiGetHdrMetadata(metadata: PSS_HDR_METADATA) -> bool;
}
unsafe extern "C" {
    pub fn LiRequestIdrFrame();
}
unsafe extern "C" {
    pub fn LiGetHostFeatureFlags() -> u32;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
